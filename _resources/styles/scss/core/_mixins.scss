// Clear after floats
@mixin clearfix {
    zoom: 1;
    *zoom: 1;
    // For IE 6/7 only Include this rule to trigger hasLayout and contain floats.
    &:before, &:after {
        content: "\0020";
        display: block;
        height: 0;
        overflow: hidden;
    }
    &:after {
        clear: both;
    }
}

// Apply clearfix to this classes by default
.clearfix, .group {
    @include clearfix;
}

// Responsive mixin
@mixin media($size, $modifier: up) {
    @if $fixMqs {
        @if $fixMqs >= nth(map-get($breakpointMap, $size), 1) {
            @content;
        }
    }
    @else {
        @if not(index(map-keys($breakpointMap), $size)) {
            @warn "Warning: `#{size}` is not a valid breakpoint name.";
        }
        @else {
            $first: false;
            $last: false;
            @if index(map-keys($breakpointMap), $size) == 1 { $first: true; }
            @if index(map-keys($breakpointMap), $size) == length($breakpointMap) { $last: true; }
            @if not($last) {
                $sizeUp: nth(map-get($breakpointMap, nth(nth($breakpointMap, index(map-keys($breakpointMap), $size) + 1), 1)), 1) - 1 !global;
            }
            @if $modifier == only { 
                @if $first { $modifier: down; }
                @if $last { $modifier: up; }
                @else {
                    $mediaBreaks: "and (min-width: #{nth(map-get($breakpointMap, $size), 1)}) and (max-width: #{$sizeUp})" !global;
                }
            }
            @if $modifier == down {
                @if $last { $mediaBreaks: "" !global; }
                @else {
                    $mediaBreaks: "and (max-width: #{$sizeUp})" !global;
                }
            }
            @if $modifier == up {
                @if $first { $mediaBreaks: "" !global; }
                @else {
                    $mediaBreaks: "and (min-width: #{nth(map-get($breakpointMap, $size), 1)})" !global;
                }
            }
            @media screen #{$mediaBreaks} {
                @content;
            }
        }
    }
}

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
    @if length($range) <= 0 {
        @return 0;
    }
    @return nth($range, 1);
}

@function upper-bound($range) {
    @if length($range) < 2 {
        @return 999999999999;
    }
    @return nth($range, 2);
}

@mixin boxShadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}
@mixin noBoxShadow {
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
}

@mixin textField {
    display: inline-block;
    outline: none;
    height: $lineHeight;
    line-height: $lineHeight;
    text-decoration: none;
    font: 14px/100% Arial, Helvetica, sans-serif;
    padding: .5em;
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
    border:1px solid #ccc;
    @include radius;
    @include boxShadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));
}

@mixin button($color: $primaryColor, $textColor: #fff) {
    display: inline-block;
    outline: none;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    text-transform: capitalize;
    font: 14px/100% Arial, Helvetica, sans-serif;
    padding: .5em 2em .55em;
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
    @include radius($btn-br);
    @include boxShadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));
    color: $textColor !important;
    font-weight: bold;
    border: solid 1px darken($color, 18%);
    background: $color;
    @include gradient(saturate($color, 15%), darken($color, 15%));
    &:hover {
        text-decoration: none;
        background: saturate($color, 10%);
        @include gradient(saturate($color, 5%), darken($color, 5%));
    }
    &:active {
        position: relative;
        top: 1px;
        color: saturate($color, 15%);
        @include gradient(saturate($color, 15%), lighten($color, 15%));
    }
}

@mixin radius($radius: $br) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin gradient($from, $to) {
    background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
    background: -moz-linear-gradient(top, $from, $to);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

// IE Specific mixin
@mixin oldIe {
    @if $oldIe {
        @content;
    }
}

// Silent Classes

%defaultFonts {
  font-family: $fontFamily;
  font-weight: $fontWeight;
  font-style: normal;
  font-size: $fontSize;
  line-height: $lineHeight;
}

%boxSizing {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}